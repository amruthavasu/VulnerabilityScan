package start;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

public class DatabaseManager {
	final static Logger logger = Logger.getLogger(DatabaseManager.class);
	private static Connection connection = null;
	private Statement statement = null;
		
	public static ResultSet executeQuery(String query) {
		try {
			connection = DataSource.getInstance().getConnection();
		} catch (Exception e) {
			System.out.println("CANNOT obtain Database connection");
			logger.error("", e);
		}
		try {
			Statement statement = connection.createStatement();
			statement.execute(query);
			connection.commit();
		} catch (Exception e) {
			logger.error("", e);
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				logger.error("", e);
			}
		}
		return null;
	}
	
	public List<Port> getPortsFromDB(String query) {
		List<Port> ports = new ArrayList<Port>();
		try {
			connection = DataSource.getInstance().getConnection();
		} catch (Exception e) {
			logger.error("", e);
		}
		try {
			Statement statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				Port port = new Port();
				port.setHost(resultSet.getString("IPADDR"));
				port.setPortid(Integer.parseInt(resultSet.getString("PORT_ID")));
				port.setState(resultSet.getString("STATE"));
				port.setProduct(resultSet.getString("PRODUCT"));
				port.setServiceName(resultSet.getString("SERVICE"));
				port.setVersion(resultSet.getString("VERSION"));
				ports.add(port);
			}
		} catch (Exception e) {
			logger.error("", e);
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				logger.error("", e);
			}
		}
		return ports;
	}
	
	public List<String> getVulnsFromDB(String query) {
		List<String> hosts = new ArrayList<String>();
		try {
			connection = DataSource.getInstance().getConnection();
		} catch (Exception e) {
			logger.error("", e);
		}
		try {
			Statement statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				String str = "Port:" + resultSet.getInt("PORTID") + ": " + resultSet.getString("VULN");
				hosts.add(str);
			}
		} catch (Exception e) {
			logger.error("", e);
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				logger.error("", e);
			}
		}
		return hosts;
	}
	
	public List<String> getHostsFromDB(String query) {
		List<String> hosts = new ArrayList<String>();
		try {
			connection = DataSource.getInstance().getConnection();
		} catch (Exception e) {
			System.out.println("CANNOT obtain Database connection");
			logger.error("", e);
		}
		try {
			Statement statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				hosts.add(resultSet.getString("IPADDR"));
			}
		} catch (Exception e) {
			logger.error("", e);
		} finally {
			try {
				try {
					statement.close();
				} catch (Exception e) {
					//e.printStackTrace();
				}
				connection.close();
			} catch (SQLException e) {
				logger.error("", e);
			}
		}
		return hosts;
	}
	
	public static boolean ifTableExixts(String tableName) {
		boolean exists = false;
		try {
			connection = DataSource.getInstance().getConnection();
			DatabaseMetaData dbm = connection.getMetaData();
			ResultSet tables = dbm.getTables(null, null, tableName, null);
			if (tables.next()) {
				exists = true;
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return exists;
	}
	
	public static void dropTable(String tableName) {
		String query = "DROP TABLE " + tableName;
		if (ifTableExixts(tableName)) {
			executeQuery(query);
		}
	}
	
	public static boolean ifAllThreadsTerminated() {
		boolean flag = false;
		String query = "SELECT * FROM HOST WHERE THREAD_STATE <> 'TERMINATED'";
		try {
			connection = DataSource.getInstance().getConnection();
		} catch (Exception e) {
			System.out.println("CANNOT obtain Database connection");
			logger.error("", e);
		}
		try {
			Statement statement = connection.createStatement();
			ResultSet res = statement.executeQuery(query);
			if(!res.next()) {
				flag = true;
			}
			connection.commit();
		} catch (Exception e) {
			logger.error("", e);
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				logger.error("", e);
			}
		}
		return flag;
	}
}
