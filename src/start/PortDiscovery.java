package start;

import java.io.File;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import VulnerabilityDiscovery.HttpMethods;
import VulnerabilityDiscovery.SSLPoodle;
import VulnerabilityDiscovery.VersionBasedVulnerabilities;
import VulnerabilityDiscovery.WeakSSLCiphers;

public class PortDiscovery implements Runnable {
	final static Logger logger = Logger.getLogger(PortDiscovery.class);
	public final static String PORT_FILE_PREFIX = GlobalConstants.getTmpDir() + File.separator + "port_";
	public DatabaseManager dbManager = new DatabaseManager();

	ExecuteCommand execCommand = new ExecuteCommand();
	private String host;
	private String id;
	// Thread t;

	public PortDiscovery(String host) {
		this.host = host;
	}

	@Override
	public void run() {
		portDiscovery();
	}

	public void portDiscovery() {
		List<Port> sslPorts = new ArrayList<Port>();
		List<Port> httpPorts = new ArrayList<Port>();

		boolean http = false;
		boolean ssl = false;
		id = "port_" + host + System.currentTimeMillis();
		String nmapCommand = "nmap -p- -PN -sS -sV -A -oX " + GlobalConstants.getTmpDir() + id + " " + host;

		int exitStatus = execCommand.execute(nmapCommand);
		if (exitStatus != 0) {
			logger.debug("ERROR: Could not execute port discovery command. Exiting..");
			System.exit(0);
		}

		System.out.println("\nList of open ports on the host : " + host + "\n");
		List<Port> ports = parseNmapOutput(id);
		for (int i = 0; i < ports.size(); i++) {
			logger.debug("Found open port : " + host + ":" + ports.get(i).getId());
			ports.get(i).setHost(host);
			insertPort(ports.get(i));
			if ("ssl".equals(ports.get(i).getDesc())) {
				sslPorts.add(ports.get(i));
				ssl = true;
			}
			if (ports.get(i).getServiceName().contains("http")) {
				httpPorts.add(ports.get(i));
				http = true;
			}
		}
		
		File file = new File(GlobalConstants.getTmpDir() + id);
		if (file.exists()) {
			try {
				file.delete();
			} catch (Exception e) {
				logger.error("", e);
			}
		}

		if (ssl == true) {
			String params[] = new String[] { host };
			logger.debug("Discovering weak SSL ciphers on the host " + host);
			new WeakSSLCiphers().findVulnerabilities(params);
			logger.debug("Testing SSL poodle vulnerability on the host " + host);
			new SSLPoodle().findVulnerabilities(params);
		}

		if (http == true) {
			String params[] = new String[] { host };
			logger.debug("Discovering vulnerable HTTP methods on the host " + host);
			new HttpMethods().findVulnerabilities(params);
		}

		String params[] = new String[] { host };
		logger.debug("Discovering version-based vulnerabilities on the host " + host);
		new VersionBasedVulnerabilities().findVulnerabilities(params);

		// Set thread state to complete
		String query = "UPDATE HOST SET THREAD_STATE = 'TERMINATED' WHERE IPADDR = '" + host + "'";
		DatabaseManager.executeQuery(query);
	}

	public List<Port> parseNmapOutput(String fileName) {
		List<Port> portList = new ArrayList<Port>();
		try {
			File inputFile = new File(GlobalConstants.getTmpDir() + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("port");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					Port portObj = new Port();
					Element state = (Element) eElement.getElementsByTagName("state").item(0);
					if (state.getAttribute("state").equals("closed")) {
						continue;
					}
					portObj.setPortid(Integer.parseInt(eElement.getAttribute("portid")));
					portObj.setState(state.getAttribute("state"));
					Element service = (Element) eElement.getElementsByTagName("service").item(0);
					if (service != null) {
						portObj.setServiceName(service.getAttribute("name"));
						portObj.setProduct(service.getAttribute("product"));
						portObj.setVersion(service.getAttribute("version"));
						if (service.hasAttribute("tunnel")) {
							portObj.setDesc(service.getAttribute("tunnel"));
						} else {
							portObj.setDesc("");
						}
					}
					portList.add(portObj);
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return portList;
	}

	private void insertPort(Port port) {
		try {
			String query = "INSERT INTO PORT VALUES (" + port.getId() + ", '" + port.getState() + "', '"
					+ port.getServiceName() + "', '" + port.getProduct() + "', '" + port.getVersion() + "', '" 
					+ host + "')";
			DatabaseManager.executeQuery(query);
		} catch (Exception e) {
			if (e instanceof SQLIntegrityConstraintViolationException) {
				//e.printStackTrace();
			}
			logger.error("", e);
		}
	}
}
