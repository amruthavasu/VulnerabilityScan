package start;

import java.io.File;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class HostDiscovery {
	ExecuteCommand execCommand = new ExecuteCommand();
	final static Logger logger = Logger.getLogger(HostDiscovery.class);
	private List<String> hosts;
	private static String id;

	public void hostDiscovery(String ipRange) {
		id = "hosts" + System.currentTimeMillis();
		String nmapCommand = "nmap -sP -oX " + GlobalConstants.getTmpDir() + id + " " + ipRange;
		int exitStatus = execCommand.execute(nmapCommand);
		if (exitStatus != 0) {
			logger.debug("ERROR: Could not execute host discovery command. Exiting..");
			System.exit(0);
		}

		hosts = parseNmapOutput(id);
		File file = new File(GlobalConstants.getTmpDir() + id);
		if (file.exists()) {
			try {
				file.delete();
			} catch (Exception e) {
				logger.error("", e);
			}
		}

		List<Thread> threads = new ArrayList<Thread>();

		for (String host : hosts) {
			logger.debug("Invoking port scan for the host: " + host);
			Thread t = new Thread(new PortDiscovery(host));
			insertHost(host, t.getState());
			threads.add(t);
			t.start();
		}
	}

	public List<String> parseNmapOutput(String fileName) {
		List<String> ips = new ArrayList<String>();
		try {
			File inputFile = new File(GlobalConstants.getTmpDir() + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("address");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					if (eElement.getAttribute("addrtype").equals("ipv4")) {
						ips.add(eElement.getAttribute("addr"));
						logger.debug("Found IP : " + eElement.getAttribute("addr"));
					}
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return ips;
	}

	public List<String> getHosts() {
		return hosts;
	}
	
	private void insertHost(String host, Thread.State state) {
		try {
			String query = "INSERT INTO HOST VALUES('" + host + "', '" + state + "')";
			DatabaseManager.executeQuery(query);
		} catch (Exception e) {
			if (e instanceof SQLIntegrityConstraintViolationException) {
				// Do nothing
			} 
			logger.error("", e);
		}
	}
}
