package VulnerabilityDiscovery;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.HashSet;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import start.DatabaseManager;
import start.ExecuteCommand;

public class HttpMethods implements VulnerabilityDiscovery {
	final static Logger logger = Logger.getLogger(HttpMethods.class);
	ExecuteCommand execCommand = new ExecuteCommand();
	private String host;
	private static String id;
	//private static final String XML_FILE_PREFIX = "/tmp/"; 

	@Override
	public void findVulnerabilities(String[] params) {
		host = params[0];
		id = "http_methods_" + host;

		// Check for SSL Enum Ciphers
		int exitStatus = execCommand.execute("nmap --script http-methods.nse -oX " + XML_FILE_PREFIX + id + " " + host);
		if (exitStatus != 0) {
			logger.debug("ERROR: Could not run script http-methods.nse. Exiting...");
			System.exit(0);
		}

		Set<String> riskyMethods = parseNmapOutput(id);
		for (String str : riskyMethods) {
			System.out.println(host + ":" + str);
		}
		
		File file = new File (XML_FILE_PREFIX + id);
		if (file.exists()) {
			try {
				file.delete();
			} catch (Exception e) {
				logger.error("", e);
			}
		}
	}

	@Override
	public Set<String> parseNmapOutput(String fileName) {
		Set<String> result = new HashSet<String>();
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(VULN_FILE_PREFIX + host, true));
			File inputFile = new File(XML_FILE_PREFIX + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("port");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					String port = eElement.getAttribute("portid");
					if (eElement.getElementsByTagName("script").getLength() > 0) {
						String scriptOutput = eElement.getElementsByTagName("script").item(0).getAttributes()
								.getNamedItem("output").getNodeValue();
						String[] buf = scriptOutput.split("\\n");
						System.out.println("");
						for (String str : buf) {
							if (str.contains("Potentially risky methods")) {
								result.add(port + " : " + str);
								insertVulnerability(str, Integer.parseInt(port));
								bw.write("Port: " + port + " : " + str.trim() + "\n");
								logger.debug("Found " + host + ":" + str );
							}
						}
					}
				}
			}
			bw.close();
		} catch (Exception e) {
			logger.error("", e);
		}
		return result;
	}
	
	@Override
	public void insertVulnerability(String vulnerability, int port) {
		try {
			String query = "INSERT INTO VULNERABILITIES VALUES ('" + host + "', " + port + ", '" + vulnerability + "')";
			DatabaseManager.executeQuery(query);
		} catch (Exception e) {
			if (e instanceof SQLIntegrityConstraintViolationException) {
				//e.printStackTrace();
			}
			logger.error("", e);
		}
		
	}
}
