package VulnerabilityDiscovery;

import java.io.File;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import start.ExecuteCommand;
import start.GlobalConstants;

public class SSLCertificateDiscovery {
	private String host;
	private String id;
	final static Logger logger = Logger.getLogger(WeakSSLCiphers.class);
	ExecuteCommand execCommand = new ExecuteCommand();
	public final static String XML_FILE_PREFIX = GlobalConstants.getTmpDir();
	
	public void findVulnerabilities(String[] params) {
		host = params[0];
		id = "ssl_cert_" + host;

		// Check for SSL Enum Ciphers
		int exitStatus = execCommand
				.execute("nmap --script ssl-cert.nse -oX " + XML_FILE_PREFIX + id + " " + host);
		if (exitStatus != 0) {
			logger.debug("ERROR: Could not run ssl-cert.nse. Exiting...");
			System.out.println("ERROR: Exiting...");
			System.exit(0);
		}

		Set<String> ciphers = parseNmapOutput(id);
		try {
			if (ciphers.size() > 0) {
				String tmp = "\n\nVulnerable Ciphers found- ";
				for (String str : ciphers) {
					///insertVulnerability(tmp + str, 0);
				}
			}
			// bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		File file = new File(XML_FILE_PREFIX + id);
		if (file.exists()) {
			try {

				file.delete();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	public Set<String> parseNmapOutput(String fileName) {
		String keyLength = null;
		String signAlg = null;
		String issuer = null;
		String cn = null;
		String port = null;
		String expiryDate = null;
		try {
			File inputFile = new File(XML_FILE_PREFIX + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("port");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					port = eElement.getAttribute("portid");
					Element script = (Element) eElement.getElementsByTagName("script").item(0);
					String output = script.getAttribute("output");
					String buf[] = output.split("\\n");
					for (String str : buf) {
						if (str.startsWith("Subject:")) {
							String tmp = str.split(" ")[1];
							tmp = tmp.split("//")[0];
							cn = tmp.split("=")[1];
						} else if (str.startsWith("Issuer:")) {
							String tmp = str.split(" ")[1];
							tmp = tmp.split("//")[0];
							issuer = tmp.split("=")[1];
						} else if (str.startsWith("Public Key bits:")) {
							keyLength = str.split(":")[1].trim();
						} else if (str.startsWith("Signature Algorithm:")) {
							signAlg = str.split(":")[1].trim();
						} else if (str.startsWith("Not valid after:")) {
							String tmp = str.split(":")[1].trim();
							expiryDate = tmp.split("T")[0];
						}
					}
					//insertVulnerability(vulnerability, port);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public void insertCertificate (String vulnerability, int port) {
		
	}
	
}
