package VulnerabilityDiscovery;

import java.io.File;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.HashSet;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import start.DatabaseManager;
import start.ExecuteCommand;

public class SSLPoodle implements VulnerabilityDiscovery {
	final static Logger logger = Logger.getLogger(SSLPoodle.class);
	ExecuteCommand execCommand = new ExecuteCommand();
	private String host;
	//private final static String XML_FILE_PREFIX = "/tmp/";
	private static String id;

	@Override
	public void findVulnerabilities(String[] params) {
		host = params[0];
		id = "poodle_" + host;

		int exitStatus = execCommand.execute("nmap --script ssl-poodle.nse -oX " + XML_FILE_PREFIX + id + " " + host);
		if (exitStatus != 0) {
			logger.debug("ERROR: Could not run script ssl-poodle.nse. Exiting...");
			System.exit(0);
		}
		parseNmapOutput(id);
		
		File file = new File(XML_FILE_PREFIX + id);
		if (file.exists()) {
			try {
				file.delete();
			} catch (Exception e) {
				logger.error("", e);
			}
		}
	}

	public Set<String> parseNmapOutput(String fileName) {
		Set<String> result = new HashSet<String>();
		try {
			String port;
			File inputFile = new File(XML_FILE_PREFIX + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("port");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					port = eElement.getAttribute("portid");
					NodeList children = eElement.getChildNodes();
					for (int i = 0; i < children.getLength(); i++) {
						eElement = (Element) children.item(i);
						if (eElement.hasAttribute("id") && (eElement.getAttribute("output").contains("VULNERABLE:"))) {
							insertVulnerability("Likely vulnerable to SSL Poodle", Integer.parseInt(port));
							result.add("Port:" + port + ": Likely vulnerable to SSL Poodle");
							logger.debug("Port:" + port + ": Likely vulnerable to SSL Poodle");
						}
					}
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return result;
	}
	
	@Override
	public void insertVulnerability(String vulnerability, int port) {
		try {
			String query = "INSERT INTO VULNERABILITIES VALUES ('" + host + "', " + port + ", '" + vulnerability + "')";
			DatabaseManager.executeQuery(query);
		} catch (Exception e) {
			if (e instanceof SQLIntegrityConstraintViolationException) {
				//e.printStackTrace();
			}
			logger.error("", e);
		}
	}
}
