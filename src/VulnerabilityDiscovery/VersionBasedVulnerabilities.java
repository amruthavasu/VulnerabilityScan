package VulnerabilityDiscovery;

import java.io.File;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import start.DatabaseManager;
import start.ExecuteCommand;

public class VersionBasedVulnerabilities implements VulnerabilityDiscovery {
	final static Logger logger = Logger.getLogger(VersionBasedVulnerabilities.class);
	ExecuteCommand execCommand = new ExecuteCommand();
	private String host;

	@Override
	public void findVulnerabilities(String[] params) {
		host = params[0];
		String id = "version_" + host;

		try {
			Process p = Runtime.getRuntime()
					.exec("nmap -p- -PN -sS -sV --script vulscan/vulscan.nse --script-args vulscandb=securityfocus.csv -oX "
							+ XML_FILE_PREFIX + id + " " + host);
			boolean exitStatus = p.waitFor(10, TimeUnit.MINUTES);
			/*
			 * if (!exitStatus) { logger.debug(
			 * "ERROR: Could not run script vulscan.nse. Exiting...");
			 * System.out.println("ERROR: Exiting..."); System.exit(0); }
			 */
		} catch (Exception e) {
			logger.error("", e);
		}
		logger.debug("Completed Vulscan script execution. Collecting results...");
		try {
			Thread.sleep(300 * 1000);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		parseNmapOutput(id);

		File file = new File(XML_FILE_PREFIX + id);
		if (file.exists()) {
			try {
				file.delete();
			} catch (Exception e) {
				logger.error("", e);
			}
		}
	}

	@Override
	public Set<String> parseNmapOutput(String fileName) {
		Set<String> result = new HashSet<String>();
		String scriptOutput;
		try {
			String port;
			File inputFile = new File(XML_FILE_PREFIX + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("port");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					port = eElement.getAttribute("portid");
					if (eElement.getElementsByTagName("script").getLength() > 0) {
						scriptOutput = eElement.getElementsByTagName("script").item(0).getAttributes()
								.getNamedItem("output").getNodeValue();
						if ("vulscan".equals(eElement.getElementsByTagName("script").item(0).getAttributes()
								.getNamedItem("id").getNodeValue())) {
							String[] buf = scriptOutput.split("\\n");
							System.out.println("");
							for (String str : buf) {
								if (str.contains(": [")) {
									str = str.split("\\x0D")[0];
									insertVulnerability(str, Integer.parseInt(port));
									result.add("Port: " + port + " : " + str);
									logger.debug("Found " + host + ":" + port + ":" + str);
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return result;
	}

	@Override
	public void insertVulnerability(String vulnerability, int port) {
		try {
			String query = "INSERT INTO VULNERABILITIES VALUES ('" + host + "', " + port + ", '" + vulnerability + "')";
			DatabaseManager.executeQuery(query);
		} catch (Exception e) {
			if (e instanceof SQLIntegrityConstraintViolationException) {
				// e.printStackTrace();
			}
			logger.error("", e);
		}

	}
}
