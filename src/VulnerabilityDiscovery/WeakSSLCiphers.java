package VulnerabilityDiscovery;

import java.io.File;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.HashSet;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import start.DatabaseManager;
import start.ExecuteCommand;

public class WeakSSLCiphers implements VulnerabilityDiscovery {
	final static Logger logger = Logger.getLogger(WeakSSLCiphers.class);
	ExecuteCommand execCommand = new ExecuteCommand();
	private String host;
	private static String id;

	@Override
	public void findVulnerabilities(String[] params) {
		host = params[0];
		id = "weak_cipher_" + host;

		// Check for SSL Enum Ciphers
		int exitStatus = execCommand
				.execute("nmap --script ssl-enum-ciphers.nse -oX " + XML_FILE_PREFIX + id + " " + host);
		if (exitStatus != 0) {
			logger.debug("ERROR: Could not run ssl-enum-ciphers.nse. Exiting...");
			System.exit(0);
		}

		Set<String> ciphers = parseNmapOutput(id);
		try {
			if (ciphers.size() > 0) {
				String tmp = "Vulnerable Ciphers found- ";
				for (String str : ciphers) {
					insertVulnerability(tmp + str, 0);
				}
			}
			// bw.close();
		} catch (Exception e) {
			logger.error("", e);
		}

		File file = new File(XML_FILE_PREFIX + id);
		if (file.exists()) {
			try {
				file.delete();
			} catch (Exception e) {
				logger.error("", e);
			}
		}
	}

	public Set<String> parseNmapOutput(String fileName) {
		String vulnCiphers[] = { "3DES", "RC4" };
		Set<String> ciphers = new HashSet<String>();
		String strength = null;
		String name = null;
		try {
			File inputFile = new File(XML_FILE_PREFIX + fileName);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(inputFile);
			doc.getDocumentElement().normalize();
			NodeList nList = doc.getElementsByTagName("table");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					NodeList elem = eElement.getChildNodes();
					for (int i = 0; i < 3; i++) {
						if (elem.item(i).hasAttributes()) {
							if ("strength".equals(elem.item(i).getAttributes().getNamedItem("key").getNodeValue())) {
								strength = elem.item(i).getTextContent();
							} else if ("name".equals(elem.item(i).getAttributes().getNamedItem("key").getNodeValue())) {
								name = elem.item(i).getTextContent();
							}
						}
					}
					if (!"A".equals(strength) && name != null) {
						for (String str : vulnCiphers) {
							if (name.contains(str)) {
								logger.debug("Found vulnerable cipher on " + host + ": " + str);
								ciphers.add(str);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
		return ciphers;
	}

	@Override
	public void insertVulnerability(String vulnerability, int port) {
		try {
			String query = "INSERT INTO VULNERABILITIES VALUES ('" + host + "', " + port + ", '" + vulnerability
					+ "')";
			DatabaseManager.executeQuery(query);
		} catch (Exception e) {
			if (e instanceof SQLIntegrityConstraintViolationException) {
				//e.printStackTrace();
			}
			logger.error("", e);
		}
	}
}
