package UI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JSeparator;
import javax.swing.JScrollPane;
import javax.swing.tree.DefaultTreeModel;

import org.apache.log4j.Logger;

import start.CreateTables;
import start.DatabaseManager;
import start.GlobalConstants;
import start.Port;
import start.Scan;

import javax.swing.tree.DefaultMutableTreeNode;

public class MainPage extends JFrame {
	final static Logger logger = Logger.getLogger(MainPage.class);
	private static final long serialVersionUID = -3764563688540581949L;
	public static final String VULN_FILE_PREFIX = GlobalConstants.getTmpDir() + File.separator + "vulnerabilities_";
	private JPanel contentPane;
	JTable table;
	public JTree tree;
	JTextArea textArea;
	private DefaultMutableTreeNode root;
	private String ipRange;
	private JButton btnScan;
	private JTextField textField;
	public static MainPage mainPage = null;
	private DefaultTreeModel model;
	private DefaultTableModel tableModel;
	JProgressBar progressBar;
	DatabaseManager dbManager = new DatabaseManager();

	/**
	 * Launch the application.
	 */
	public static MainPage getInstance() {
		if (mainPage == null) {
			mainPage = new MainPage();
		}
		return mainPage;
	}

	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			logger.error("", e);
		}

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainPage frame = MainPage.getInstance();
					frame.setVisible(true);
					frame.addWindowListener(new java.awt.event.WindowAdapter() {
						@Override
						public void windowClosing(java.awt.event.WindowEvent windowEvent) {
							int response = JOptionPane.showConfirmDialog(frame, "Are you sure to close this window?",
									"Quit?", JOptionPane.YES_NO_OPTION);

							if (response == JOptionPane.YES_OPTION) {
								// Drop all tables
								DatabaseManager.dropTable("VULNERABILITIES");
								DatabaseManager.dropTable("PORT");
								DatabaseManager.dropTable("HOST");
								System.exit(0);
							}
						}
					});
				} catch (Exception e) {
					logger.error("", e);
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	private MainPage() {
		createFrame();
		CreateTables createTables = new CreateTables();
		createTables.createAllTables();
	}

	private void createFrame() {
		setExtendedState(JFrame.MAXIMIZED_BOTH);
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		setBounds(100, 100, 450, 300);

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		textField = new HintTextField("Enter IP range");
		textField.setMaximumSize(new Dimension(200, 2147483647));
		textField.setSize(new Dimension(20, 0));
		menuBar.add(textField);
		textField.setColumns(20);

		btnScan = new JButton("Scan");
		btnScan.setAlignmentX(Component.LEFT_ALIGNMENT);
		btnScan.setHorizontalAlignment(SwingConstants.LEFT);
		menuBar.add(btnScan);
		ScanButton s1 = new ScanButton();
		btnScan.addActionListener(s1);

		JSeparator separator = new JSeparator();
		menuBar.add(separator);

		progressBar = new JProgressBar();
		progressBar.setMaximumSize(new Dimension(100, 14));
		progressBar.setAlignmentX(Component.RIGHT_ALIGNMENT);
		menuBar.add(progressBar);
		progressBar.setIndeterminate(true);
		progressBar.setVisible(false);

		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		JSplitPane splitPane = new JSplitPane();
		contentPane.add(splitPane, BorderLayout.CENTER);

		root = new DefaultMutableTreeNode("Discovered Hosts");
		model = new DefaultTreeModel(root);
		tree = new JTree(model);
		tree.addTreeSelectionListener(new TreeSelectionListener() {
			public void valueChanged(TreeSelectionEvent e) {
				DefaultTableModel model = (DefaultTableModel) mainPage.table.getModel();
				model.setRowCount(0);
				mainPage.textArea.setText("");

				DefaultMutableTreeNode node = (DefaultMutableTreeNode) mainPage.tree.getLastSelectedPathComponent();
				if (node == null) {
					return;
				}
				String nodeInfo = (String) node.getUserObject();
				String query = "SELECT * FROM PORT WHERE IPADDR = '" + nodeInfo + "'";
				List<Port> ports = dbManager.getPortsFromDB(query);
				for (Port port : ports) {
					Object obj[] = new Object[] { port.getId(), port.getState(), port.getServiceName(),
							port.getProduct(), port.getVersion() };
					model.addRow(obj);
				}

				query = "SELECT * FROM VULNERABILITIES WHERE IPADDR = '" + nodeInfo + "'";
				List<String> vulns = dbManager.getVulnsFromDB(query);
				for (String str : vulns) {
					if (str.contains("Port:0:")) {
						String buf[] = str.split(":");
						str = buf[buf.length - 1];
					}
					textArea.append(str + "\n");
				}
			}
		});

		splitPane.setLeftComponent(tree);

		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		splitPane.setRightComponent(tabbedPane);

		JScrollPane scrollPane = new JScrollPane();
		tabbedPane.addTab("Open Ports", null, scrollPane, null);

		JScrollPane scrollPane1 = new JScrollPane();
		tabbedPane.addTab("Vulnerabilities", null, scrollPane1, null);

		JScrollPane scrollPane2 = new JScrollPane();
		//tabbedPane.addTab("SSL Certificates", null, scrollPane2, null);

		textArea = new JTextArea();
		// textArea.setBackground(SystemColor.menu);
		textArea.setWrapStyleWord(true);
		textArea.setLineWrap(true);
		textArea.setEditable(false);
		textArea.setMargin(new Insets(10, 10, 10, 10));
		scrollPane1.setViewportView(textArea);
		textArea.setForeground(Color.RED);

		table = new JTable();
		tableModel = new DefaultTableModel(new Object[][] {},
				new String[] { "Port Id", "State", "Service", "Product", "Version" }) {
			private static final long serialVersionUID = -3899866676368937978L;
			boolean[] columnEditables = new boolean[] { false, false, false, false, false };

			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		};
		table.setModel(tableModel);
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);
		for (int i = 0; i < tableModel.getColumnCount(); i++) {
			table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
		}

		scrollPane.setViewportView(table);

		JTable certTable = new JTable();
		DefaultTableModel certTableModel = new DefaultTableModel(new Object[][] {}, new String[] { "Common Name",
				"Port Id", "Issuer CN", "Key Length", "Singnature Algorithm", "Expiry Date" }) {
			private static final long serialVersionUID = -6288110368457184945L;
			boolean[] columnEditables = new boolean[] { false, false, false, false, false, false };
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		};
		certTable.setModel(certTableModel);
		DefaultTableCellRenderer centerRenderer1 = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);
		for (int i = 0; i < certTableModel.getColumnCount(); i++) {
			certTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer1);
		}
		scrollPane2.setViewportView(certTable);
	}

	private class ScanButton implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == btnScan) {
				ipRange = textField.getText();
				new Scan(ipRange);
				TimerTask task = new PollDatabase();
				Timer timer = new Timer(true);
				timer.scheduleAtFixedRate(task, 0, 10000);
			}
		}
	}
}
